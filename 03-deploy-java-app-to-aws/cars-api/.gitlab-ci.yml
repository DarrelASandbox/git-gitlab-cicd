# https://docs.gitlab.com/ee/ci/variables/predefined_variables.html
variables:
  ARTIFACT_NAME: cars-api-v$CI_PIPELINE_IID.jar
  APP_NAME: cars-api

stages:
  - build
  - test
  - deploy
  - post deploy
  - publishing

build:
  stage: build
  image: eclipse-temurin:11
  script:
    - sed -i "s/CI_PIPELINE_IID/$CI_PIPELINE_IID/" ./src/main/resources/application.yml
    - sed -i "s/CI_COMMIT_SHORT_SHA/$CI_COMMIT_SHORT_SHA/" ./src/main/resources/application.yml
    - sed -i "s/CI_COMMIT_BRANCH/$CI_COMMIT_BRANCH/" ./src/main/resources/application.yml
    - ./gradlew build
    - mv ./build/libs/cars-api.jar ./build/libs/$ARTIFACT_NAME
  artifacts:
    paths:
      - ./build/libs/

smoke test:
  stage: test
  image: eclipse-temurin:11
  script:
    - java -jar ./build/libs/$ARTIFACT_NAME &
    - sleep 30
    - curl http://localhost:5000/actuator/health | grep "UP"

# https://pmd.github.io/
# PMD is an extensible cross-language static code analyzer
# https://pmd.github.io/latest/pmd_rules_java_bestpractices.html#systemprintln
# `pmd-ruleset.xml`
code quality:
  stage: test
  image: eclipse-temurin:11
  script:
    - ./gradlew pmdMain pmdTest
  artifacts:
    when: always
    paths:
      - build/reports/pmd

unit tests:
  stage: test
  image: eclipse-temurin:11
  script:
    - ./gradlew test
  artifacts:
    when: always
    paths:
      - build/reports/tests
    reports:
      junit: build/test-results/test/*.xml

# Refer to AWS IAM section in README.md
deploy:
  stage: deploy
  image:
    name: amazon/aws-cli
    entrypoint: ['']

  # amazon/aws-cli uses a different package manager
  # jq is a lightweight and flexible command-line JSON processor.
  # https://stedolan.github.io/jq/
  before_script:
    - yum install -y jq

  script:
    # Change the region accordingly
    - aws configure set region us-east-1
    # $S3_BUCKET variable refers to the one on GitLab Group
    - aws s3 cp ./build/libs/$ARTIFACT_NAME s3://$S3_BUCKET/$ARTIFACT_NAME
    - aws elasticbeanstalk create-application-version --application-name $APP_NAME --version-label $CI_PIPELINE_IID --source-bundle S3Bucket=$S3_BUCKET,S3Key=$ARTIFACT_NAME
    - CNAME=$(aws elasticbeanstalk update-environment --application-name $APP_NAME --environment-name "production" --version-label=$CI_PIPELINE_IID | jq '.CNAME' --raw-output)
    # update-environment takes time
    # either use `sleep` or write a script to check every x seconds
    - sleep 45
    - curl http://$CNAME/actuator/info | grep $CI_PIPELINE_IID
    - curl http://$CNAME/actuator/health | grep "UP"

api testing:
  stage: post deploy
  image:
    name: vdespa/newman
    entrypoint:[""]

  # Postman - Running collections on the command line with Newman
  # https://learning.postman.com/docs/running-collections/using-newman-cli/command-line-integration-with-newman/
  # Production.postman_environment.json requires the AWS url
  script:
    - newman --version
    - newman run "Cars+API.postman_collection" --environment Production.postman_environment.json --reporters cli,htmlextra,junit --reporter-htmlextra-export "newman/report.html" --reporter-junit-export "newman/report.xml"
  
  artifacts:
  when: always
  paths:
    - newman/
  reports:
    junit: newman/report.xml

pages:
  stage: publishing
  script:
    - mkdir public
    - mv newman/report.html public/index.html
  artifacts:
    paths:
      - public